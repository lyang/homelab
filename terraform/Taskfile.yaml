---
# yaml-language-server: $schema=https://taskfile.dev/schema.json

version: '3'
set: [pipefail]
shopt: [globstar]

vars:
  ENCRYPTED_BACKEND: '{{ .TASKFILE_DIR }}/backend.sops.json'
  DECRYPTED_BACKEND: '{{ .TASKFILE_DIR }}/backend.json'
  ENCRYPTED_FLUX_VARS: '{{ .TASKFILE_DIR }}/flux.auto.tfvars.sops.json'
  DECRYPTED_FLUX_VARS: '{{ .TASKFILE_DIR }}/flux.auto.tfvars.json'
  ENCRYPTED_TALOS_VM_VARS: '{{ .TASKFILE_DIR }}/talos-vm.auto.tfvars.sops.json'
  DECRYPTED_TALOS_VM_VARS: '{{ .TASKFILE_DIR }}/talos-vm.auto.tfvars.json'
  ENCRYPTED_XOA_VARS: '{{ .TASKFILE_DIR }}/xoa.auto.tfvars.sops.json'
  DECRYPTED_XOA_VARS: '{{ .TASKFILE_DIR }}/xoa.auto.tfvars.json'

tasks:
  bootstrap:
    desc: Bootstrap Terraform config
    deps:
      - init
      - decrypt

  init:
    desc: Initialize terraform
    internal: true
    cmd: terraform -chdir='{{ .TASKFILE_DIR }}' init -backend-config='{{ .TASKFILE_DIR }}/backend.json'

  decrypt:
    internal: true
    deps:
      - decrypt-auto-vars
      - decrypt-backend

  decrypt-auto-vars:
    internal: true
    sources:
      - '{{ .ENCRYPTED_FLUX_VARS }}'
      - '{{ .ENCRYPTED_TALOS_VM_VARS }}'
      - '{{ .ENCRYPTED_XOA_VARS }}'
    generates:
      - '{{ .DECRYPTED_FLUX_VARS }}'
      - '{{ .DECRYPTED_TALOS_VM_VARS }}'
      - '{{ .DECRYPTED_XOA_VARS }}'
    cmds:
      - SOPS_AGE_KEY_FILE={{ .SOPS_AGE_KEY_FILE }} sops decrypt '{{ .ENCRYPTED_FLUX_VARS }}' --output '{{ .DECRYPTED_FLUX_VARS }}'
      - SOPS_AGE_KEY_FILE={{ .SOPS_AGE_KEY_FILE }} sops decrypt '{{ .ENCRYPTED_TALOS_VM_VARS }}' --output '{{ .DECRYPTED_TALOS_VM_VARS }}'
      - SOPS_AGE_KEY_FILE={{ .SOPS_AGE_KEY_FILE }} sops decrypt '{{ .ENCRYPTED_XOA_VARS }}' --output '{{ .DECRYPTED_XOA_VARS }}'

  decrypt-backend:
    internal: true
    sources:
      - '{{ .ENCRYPTED_BACKEND }}'
    generates:
      - '{{ .DECRYPTED_BACKEND }}'
    cmds:
      - SOPS_AGE_KEY_FILE={{ .SOPS_AGE_KEY_FILE }} sops decrypt '{{ .ENCRYPTED_BACKEND }}' --output '{{ .DECRYPTED_BACKEND }}'

  fmt:
    desc: terraform fmt
    deps:
      - decrypt
    cmd: terraform -chdir='{{ .TASKFILE_DIR }}' fmt -recursive

  plan:
    desc: terraform plan
    deps:
      - decrypt
      - fmt
    cmd: terraform -chdir='{{ .TASKFILE_DIR }}' plan

  apply:
    desc: terraform apply
    deps:
      - decrypt
      - fmt
    cmds:
      - terraform -chdir='{{ .TASKFILE_DIR }}' apply

  output:
    desc: terraform output
    deps:
      - decrypt
      - fmt
    cmds:
      - terraform -chdir='{{ .TASKFILE_DIR }}' output -json

  destroy:
    desc: terraform destroy
    deps:
      - decrypt
      - fmt
    cmd: terraform -chdir='{{ .TASKFILE_DIR }}' destroy
