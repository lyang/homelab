---
# yaml-language-server: $schema=https://taskfile.dev/schema.json

version: '3'
set: [pipefail]
shopt: [globstar]

vars:
  ENCRYPTED_BACKEND: '{{ .TASKFILE_DIR }}/backend.sops.json'
  DECRYPTED_BACKEND: '{{ .TASKFILE_DIR }}/backend.json'
  ENCRYPTED_FLUX_VARS: '{{ .TASKFILE_DIR }}/flux.auto.tfvars.sops.json'
  DECRYPTED_FLUX_VARS: '{{ .TASKFILE_DIR }}/flux.auto.tfvars.json'
  ENCRYPTED_TALOS_VARS: '{{ .TASKFILE_DIR }}/talos.auto.tfvars.sops.json'
  DECRYPTED_TALOS_VARS: '{{ .TASKFILE_DIR }}/talos.auto.tfvars.json'
  ENCRYPTED_XOA_PROVIDER_VARS: '{{ .TASKFILE_DIR }}/xoa-provider.auto.tfvars.sops.json'
  DECRYPTED_XOA_PROVIDER_VARS: '{{ .TASKFILE_DIR }}/xoa-provider.auto.tfvars.json'

tasks:
  bootstrap:
    desc: Bootstrap Terraform config
    deps:
      - init
      - decrypt

  init:
    desc: Initialize terraform
    internal: true
    cmd: terraform -chdir='{{ .TASKFILE_DIR }}' init -backend-config='{{ .TASKFILE_DIR }}/backend.json'

  decrypt:
    internal: true
    run: when_changed
    deps:
      - decrypt-auto-vars
      - decrypt-backend

  decrypt-auto-vars:
    internal: true
    sources:
      - '{{ .ENCRYPTED_FLUX_VARS }}'
      - '{{ .ENCRYPTED_TALOS_VARS }}'
      - '{{ .ENCRYPTED_XOA_PROVIDER_VARS }}'
    generates:
      - '{{ .DECRYPTED_FLUX_VARS }}'
      - '{{ .DECRYPTED_TALOS_VARS }}'
      - '{{ .DECRYPTED_XOA_PROVIDER_VARS }}'
    cmds:
      - SOPS_AGE_KEY_FILE={{ .SOPS_AGE_KEY_FILE }} sops decrypt '{{ .ENCRYPTED_FLUX_VARS }}' --output '{{ .DECRYPTED_FLUX_VARS }}'
      - SOPS_AGE_KEY_FILE={{ .SOPS_AGE_KEY_FILE }} sops decrypt '{{ .ENCRYPTED_TALOS_VARS }}' --output '{{ .DECRYPTED_TALOS_VARS }}'
      - SOPS_AGE_KEY_FILE={{ .SOPS_AGE_KEY_FILE }} sops decrypt '{{ .ENCRYPTED_XOA_PROVIDER_VARS }}' --output '{{ .DECRYPTED_XOA_PROVIDER_VARS }}'

  decrypt-backend:
    internal: true
    sources:
      - '{{ .ENCRYPTED_BACKEND }}'
    generates:
      - '{{ .DECRYPTED_BACKEND }}'
    cmds:
      - SOPS_AGE_KEY_FILE={{ .SOPS_AGE_KEY_FILE }} sops decrypt '{{ .ENCRYPTED_BACKEND }}' --output '{{ .DECRYPTED_BACKEND }}'

  fmt:
    desc: terraform fmt
    deps:
      - decrypt
    cmd: terraform -chdir='{{ .TASKFILE_DIR }}' fmt -recursive

  required-targets:
    internal: true
    deps:
      - decrypt
      - fmt
    desc: required target for full plan/apply
    cmds:
      - task: require-target
        vars:
          ACTION: "{{ .ACTION }}"
          TARGET: "module.talos.talos_image_factory_schematic.this"
      - task: require-target
        vars:
          ACTION: "{{ .ACTION }}"
          TARGET: "module.talos"
    requires:
      vars: [ACTION]

  require-target:
    internal: true
    cmds:
      - terraform -chdir='{{ .TASKFILE_DIR }}' {{ .ACTION }} -target {{ .TARGET }}
      - cmd: 'if [[ "{{ .ACTION }}" == "plan" ]]; then echo NEED TO APPLY REQUIRED TARGET FIRST: {{ .TARGET }}; exit 1; fi'
        silent: true
    requires:
      vars:
        - name: ACTION
          enum:
            - plan
            - apply
    status:
      - terraform -chdir='{{ .TASKFILE_DIR }}' state show {{ .TARGET }}

  plan:
    desc: terraform plan
    deps:
      - task: required-targets
        vars:
          ACTION: plan
    cmds:
      - terraform -chdir='{{ .TASKFILE_DIR }}' plan {{ .CLI_ARGS }}

  apply:
    desc: terraform apply
    deps:
      - task: required-targets
        vars:
          ACTION: apply
    cmds:
      - terraform -chdir='{{ .TASKFILE_DIR }}' apply {{ .CLI_ARGS }}

  output:
    desc: terraform output
    deps:
      - decrypt
      - fmt
    cmds:
      - terraform -chdir='{{ .TASKFILE_DIR }}' output -json {{ .CLI_ARGS }}

  destroy:
    desc: terraform destroy
    deps:
      - decrypt
      - fmt
    cmd: terraform -chdir='{{ .TASKFILE_DIR }}' destroy {{ .CLI_ARGS }}
